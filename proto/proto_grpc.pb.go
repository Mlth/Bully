// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/proto.proto

package Bully

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BullyClient is the client API for Bully service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BullyClient interface {
	CheckLeaderConn(ctx context.Context, in *CheckMessage, opts ...grpc.CallOption) (*CheckReturnMessage, error)
	CheckForHigherServers(ctx context.Context, in *HigherServersMessage, opts ...grpc.CallOption) (*HigherServersReturnMessage, error)
	NewCoordinator(ctx context.Context, in *CoordinaterMessage, opts ...grpc.CallOption) (*CoordinaterAckMessage, error)
}

type bullyClient struct {
	cc grpc.ClientConnInterface
}

func NewBullyClient(cc grpc.ClientConnInterface) BullyClient {
	return &bullyClient{cc}
}

func (c *bullyClient) CheckLeaderConn(ctx context.Context, in *CheckMessage, opts ...grpc.CallOption) (*CheckReturnMessage, error) {
	out := new(CheckReturnMessage)
	err := c.cc.Invoke(ctx, "/Bully.Bully/checkLeaderConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bullyClient) CheckForHigherServers(ctx context.Context, in *HigherServersMessage, opts ...grpc.CallOption) (*HigherServersReturnMessage, error) {
	out := new(HigherServersReturnMessage)
	err := c.cc.Invoke(ctx, "/Bully.Bully/checkForHigherServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bullyClient) NewCoordinator(ctx context.Context, in *CoordinaterMessage, opts ...grpc.CallOption) (*CoordinaterAckMessage, error) {
	out := new(CoordinaterAckMessage)
	err := c.cc.Invoke(ctx, "/Bully.Bully/newCoordinator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BullyServer is the server API for Bully service.
// All implementations must embed UnimplementedBullyServer
// for forward compatibility
type BullyServer interface {
	CheckLeaderConn(context.Context, *CheckMessage) (*CheckReturnMessage, error)
	CheckForHigherServers(context.Context, *HigherServersMessage) (*HigherServersReturnMessage, error)
	NewCoordinator(context.Context, *CoordinaterMessage) (*CoordinaterAckMessage, error)
	mustEmbedUnimplementedBullyServer()
}

// UnimplementedBullyServer must be embedded to have forward compatible implementations.
type UnimplementedBullyServer struct {
}

func (UnimplementedBullyServer) CheckLeaderConn(context.Context, *CheckMessage) (*CheckReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLeaderConn not implemented")
}
func (UnimplementedBullyServer) CheckForHigherServers(context.Context, *HigherServersMessage) (*HigherServersReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForHigherServers not implemented")
}
func (UnimplementedBullyServer) NewCoordinator(context.Context, *CoordinaterMessage) (*CoordinaterAckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCoordinator not implemented")
}
func (UnimplementedBullyServer) mustEmbedUnimplementedBullyServer() {}

// UnsafeBullyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BullyServer will
// result in compilation errors.
type UnsafeBullyServer interface {
	mustEmbedUnimplementedBullyServer()
}

func RegisterBullyServer(s grpc.ServiceRegistrar, srv BullyServer) {
	s.RegisterService(&Bully_ServiceDesc, srv)
}

func _Bully_CheckLeaderConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServer).CheckLeaderConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bully.Bully/checkLeaderConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServer).CheckLeaderConn(ctx, req.(*CheckMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bully_CheckForHigherServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HigherServersMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServer).CheckForHigherServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bully.Bully/checkForHigherServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServer).CheckForHigherServers(ctx, req.(*HigherServersMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bully_NewCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinaterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServer).NewCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bully.Bully/newCoordinator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServer).NewCoordinator(ctx, req.(*CoordinaterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Bully_ServiceDesc is the grpc.ServiceDesc for Bully service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bully_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bully.Bully",
	HandlerType: (*BullyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "checkLeaderConn",
			Handler:    _Bully_CheckLeaderConn_Handler,
		},
		{
			MethodName: "checkForHigherServers",
			Handler:    _Bully_CheckForHigherServers_Handler,
		},
		{
			MethodName: "newCoordinator",
			Handler:    _Bully_NewCoordinator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
